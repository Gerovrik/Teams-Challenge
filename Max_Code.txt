#*********************
#start max_code

#******************************

import pandas as pd
import os as _dir
import matplotlib.pyplot as plt
import scipy.stats as stats
%matplotlib inline


#***************************************

song_df=pd.read_csv("C:\\Users\\pmaxl\\OneDrive\\Desktop\\Group-Projects\\Teams-Challenge\\Resources\\top10s.csv",encoding="ISO-8859-1")

#******************************************


cln_songs=song_df[song_df['dB']>-20]

#*****************************************
cols=['bpm', 'nrgy', 'dnce', 'dB', 'live', 'val', 'dur', 'acous', 'spch']
years=song_df['year'].unique()

songs2010=cln_songs[cln_songs['year']==2010]
songs2011=cln_songs[cln_songs['year']==2011]
songs2012=cln_songs[cln_songs['year']==2012]
songs2013=cln_songs[cln_songs['year']==2013]
songs2014=cln_songs[cln_songs['year']==2014]
songs2015=cln_songs[cln_songs['year']==2015]
songs2016=cln_songs[cln_songs['year']==2016]
songs2017=cln_songs[cln_songs['year']==2017]
songs2018=cln_songs[cln_songs['year']==2018]
songs2019=cln_songs[cln_songs['year']==2019]

p_values={'bpm': [],
         'nrgy': [],
         'dnce': [],
         'dB': [],
         'live': [],
         'val': [],
         'dur': [],
         'acous': [],
         'spch': []
         }

cols_of_interest = []


print("P-Values")
print("=============")

for x in cols:
    data={'2010': songs2010[x],
         '2011': songs2011[x],
         '2012': songs2012[x], 
         '2013': songs2013[x],
         '2014': songs2014[x],
         '2015': songs2015[x],
         '2016': songs2016[x],
         '2017': songs2017[x],
         '2018': songs2018[x],
         '2019': songs2019[x]
         }
    
    
    
    df=pd.DataFrame(data)
    
    anova_x=stats.f_oneway(songs2010[x],
                          songs2011[x],
                          songs2012[x],
                          songs2013[x],
                          songs2014[x],
                          songs2015[x],
                          songs2016[x],
                          songs2017[x],
                          songs2018[x],
                          songs2019[x]
                          )
    print(f'{x}: {anova_x[1]}')
    
    if anova_x[1]<0.05: cols_of_interest.append(x)
        
    
    for y in range(len(years)-1):
        tt_result=stats.ttest_ind(df.iloc[:,y], df.iloc[:,y+1], equal_var=False, nan_policy='omit')
        p_values[x].append(tt_result[1])


pv_df=pd.DataFrame(p_values)

pv_df=pv_df[cols_of_interest]

#********************************************

year_ranges=['2010-2011', '2011-2012', '2012-2013', '2013-2014', '2014-2015', '2015-2016', '2016-2017', '2017-2018', '2018-2019']

pv_df.index=year_ranges
pv_df



#*******************************
by_year=cln_songs.groupby('year')
for x in cols_of_interest:
    var=by_year[x].mean()
    
    (slope, intercept, rvalue, pvalue, stderr) = stats.linregress(var.index, var)
    regress_values = var.index * slope + intercept
    
    
    plt.plot(var.index, var, color='darkblue')
    plt.plot(var.index,regress_values, color="firebrick")
    plt.title(f'{x} by year')
    plt.ylabel(x)
    plt.grid()
    line_eq = "slope = " + str(round(slope,2)) + "x"
    correlation = stats.pearsonr(var.index, var)
    plt.annotate(f'r= {round(correlation[0], 4)}', (2012.5, var.max()), size=12)
    plt.annotate(line_eq, (2015, var.max()), size=12)
    plt.savefig(f'C:\\Users\\pmaxl\\OneDrive\\Desktop\\Group-Projects\\Teams-Challenge\\images\\{x}_by_year.png')
    plt.show()
    
    
#********************

pct_change={
           'nrgy': [],
           'dB': [],
           'val': [],
           'dur': [],
           'acous': []
           }

mean_by_year=by_year.mean()

for x in range(2010, 2019):
    for y in cols_of_interest:
        change=mean_by_year.loc[(x+1),y] - mean_by_year.loc[x, y]
        changepct=(change/mean_by_year.loc[x,y])*100
        changepct=round(changepct, 2)
        pct_change[y].append(changepct)

        
pc_df=pd.DataFrame(pct_change)
pc_df.index=year_ranges
pc_df


#****************************************


for y in cols_of_interest:
    plt.bar(x=pc_df.index, height=pc_df[y])
    plt.ylabel("percent change")
    plt.title(f'Percent Change in {y}')
    plt.xticks(rotation=90)
    plt.show()

avg_pct_change={'Category': [],
               'Average Change by Year': []}

for x in cols_of_interest:
    avg_pct_change['Category'].append(x)
    
    avg_change=pc_df[x].mean()
    
    avg_pct_change['Average Change by Year'].append(avg_change)
    
apc_df=pd.DataFrame(avg_pct_change)

apc_df

#******************************************

colors=[]

for x in range(len(apc_df)):
    if apc_df.loc[x, 'Average Change by Year']>0:
        colors.append('darkblue')
    else:
        colors.append('firebrick')
    




fig, (ax, ax2) = plt.subplots(2, 1, sharex=True)

ax.bar(x=apc_df['Category'],
       height= abs(apc_df['Average Change by Year']),
       color=colors)

ax2.bar(x=apc_df['Category'],
       height= abs(apc_df['Average Change by Year']),
       color=colors)

ax.set_ylim(18, 20)
ax2.set_ylim(0, 3)

ax.spines['bottom'].set_visible(False)
ax2.spines['top'].set_visible(False)
ax.xaxis.tick_top()
ax.tick_params(labeltop=False)  
ax2.xaxis.tick_bottom()

d = .01  
kwargs = dict(transform=ax.transAxes, color='k', clip_on=False)
ax.plot((-d, +d), (-d, +d), **kwargs)        
ax.plot((1 - d, 1 + d), (-d, +d), **kwargs)  

kwargs.update(transform=ax2.transAxes)  
ax2.plot((-d, +d), (1 - d, 1 + d), **kwargs)  
ax2.plot((1 - d, 1 + d), (1 - d, 1 + d), **kwargs)  

plt.savefig(f'C:\\Users\\pmaxl\\OneDrive\\Desktop\\Group-Projects\\Teams-Challenge\\images\\Percent_change.png')

plt.show()


#***********************************

#end max_code

#*************************